import os
import subprocess
import pathlib
import shutil
import yaml


# === CONFIGURATION ===
API_NAME = "REST/my_first_stepzen"
REST_ENDPOINT = "https://fake-json-api.mock.beeceptor.com/users"
HEADERS = {
    "Authorization": "Bearer DUMMY_TOKEN"
}
STEPZEN_DOMAIN = "us-east-a.ibm.stepzen.net"   # ðŸ”¹ Replace with your IBM StepZen domain
STEPZEN_ACCOUNT = "nifukiu"            # ðŸ”¹ IBM account name
STEPZEN_ADMINKEY = "nifukiu::local.net+1000::c59c8a5edf9b9e6bd2e38d9b97a902bf1fdb2b29426b73cb0333627147b1efa2"  # ðŸ”¹ IBM admin key
ROOT_FOLDER = "/Users/shankarsharma/Desktop/GQL/stepzen_gql_api"
# ======================

def start_stepzen():
    """Start StepZen API locally."""
    print("[INFO] Starting StepZen API locally in current directory...")
    subprocess.run(["stepzen", "start"], check=True)

def clean_schema():
    """Delete old StepZen cache to prevent stale configurations."""
    schema = pathlib.Path("schema")
    if schema.exists():
        shutil.rmtree(schema)
        print("[INFO] Cleared old StepZen cache")

def login_stepzen():
    """Login for IBM-managed StepZen by writing credentials directly."""
    creds_path = pathlib.Path.home() / ".stepzen" / "credentials"
    creds_path.parent.mkdir(parents=True, exist_ok=True)

    if creds_path.exists():
        print("[INFO] StepZen already logged in (credentials file exists).")
        return

    print("[INFO] Writing IBM StepZen credentials...")
    creds_content = f"""
account: {STEPZEN_ACCOUNT}
adminkey: {STEPZEN_ADMINKEY}
domain: {STEPZEN_DOMAIN}
"""
    with open(creds_path, "w") as f:
        f.write(creds_content.strip())

    print(f"[INFO] Credentials saved to {creds_path}")

    # Verify login
    subprocess.run(["stepzen", "whoami"], check=True)

def deploy_stepzen():
    """Deploy API to IBM StepZen."""
    print(f"[INFO] Deploying {API_NAME} to IBM StepZen...")
    subprocess.run(["stepzen", "deploy", API_NAME, "--dir",ROOT_FOLDER], check=True)
    print("[INFO] Deployment finished.")

def init_stepzen():
    """Initialize StepZen workspace if missing."""
    if os.path.exists(os.path.join(ROOT_FOLDER, ".stepzen")):
        print("[INFO] Initializing StepZen workspace...")
        subprocess.run(["stepzen", "init"], check=True)
    else:
        print("[INFO] StepZen workspace already exists.")

def import_stepzen(source_type, connection, output_dir=None, query_name=None, query_type=None, name=None):
    """
    Dynamically run StepZen import for REST or DB/GraphQL sources
    and write IBM-compliant config.yaml in the workspace root.
    """
    if output_dir is None:
        output_dir = os.getcwd()  # default to current dir as workspace root

    # Stepzen init    
    init_stepzen()

    # Stepzen login
    login_stepzen ()

    # Stepzen import
    cmd = ["stepzen", "import"]
    if source_type.lower() == "rest":
        if not query_name or not query_type or not name:
            raise ValueError("For REST imports, 'query_name', 'query_type', and 'name' are required")
        
        # Build StepZen import command
    cmd = ["stepzen", "import"]

    if source_type.lower() == "rest":
        if not query_name or not query_type or not name:
            raise ValueError("For REST imports, 'query_name', 'query_type', and 'name' are required")
        url = connection.strip()  # remove leading/trailing whitespace
        # Properly quote the URL for StepZen CLI
        cmd += [
            "curl",
            url,
            "--query-name", query_name,
            "--query-type", query_type,
            "--name", name
        ]
    else:
        cmd += [source_type, connection]

    print(f"[INFO] Running: {' '.join(cmd)}")
    result = subprocess.run(cmd, capture_output=True, text=True)

    if result.returncode != 0:
        raise RuntimeError(f"[ERROR] StepZen import failed:\n{result.stderr}")

    print(result.stdout)
   
    # Move index.yaml to the appropriate directory
    src = os.path.join(ROOT_FOLDER, "index.graphql")
    dst = os.path.join(ROOT_FOLDER, "index.graphql")
    shutil.move(src, dst)
    #  # Move schema.yaml to the appropriate directory
    # src = os.path.join(ROOT_FOLDER+"/schema", "index.graphql")
    # dst = os.path.join(BASE_FOLDER, "schema.graphql")
    # shutil.move(src, dst)
    # shutil.rmtree(ROOT_FOLDER+"/schema")  # Clean up schema folder
    

    # Collect all .graphql files generated
    schema_files = [f for f in os.listdir(ROOT_FOLDER) if f.endswith(".graphql")]
    if not schema_files:
        raise RuntimeError("[ERROR] No .graphql files generated by stepzen import")


    config = {
    "configurationset": [
        {
            "configuration": {
                "name": "api",
                "configuration": "rest_backend"
            
        }
        }
       
    ]  # optional, for your tracking
    }

    config_path = os.path.join(ROOT_FOLDER, "config.yaml")
    with open(config_path, "w", encoding="utf-8") as f:
        yaml.dump(config, f, sort_keys=False)

    print(f"[INFO] IBM-compliant config.yaml written at {config_path}")
    return schema_files


def main():
    clean_schema()
    import_stepzen(
    source_type="rest",
    connection=REST_ENDPOINT,
    output_dir=ROOT_FOLDER,
    query_name="users",  # Name of the query in GraphQL schema
    query_type="User",  # Type of the query in GraphQL schema
    name="schema"
)
    #moveConfigs()  # Move config.yaml to the correct location
    deploy_stepzen()      # Deploy API

if __name__ == "__main__":
    main()
